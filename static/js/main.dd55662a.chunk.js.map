{"version":3,"sources":["Layout/Header.js","Layout/Navigation.js","Components/Home.js","Store/Store.js","Components/Login.js","Components/LoginContainer.js","Components/LoginHOC.js","Components/About.js","Components/BoardForm.js","Components/BoardItem.js","Components/Board.js","Components/BoardDbForm.js","Components/BoardDbItem.js","Components/BoardDb.js","Components/MyBoard.js","Components/MyPage.js","Routes/Router.js","App.js","serviceWorker.js","index.js"],"names":["Header","this","props","logged","onLogout","Container","Element","ShortCut","to","onClick","Logo","width","height","src","alt","Search","style","textDecoration","color","Component","styled","div","Navigation","Nav","NavList","NavItem","ul","li","API_KEY","Home","getWeather","state","lat","long","fetch","then","response","json","setState","temperature","Math","floor","main","temp","name","weather","icon","img_url","Store","React","createContext","Login","responseGoogle","res","console","log","responseKakao","id","profile","properties","nickname","provider","doSignUp","responseFail","err","window","sessionStorage","setItem","onLogin","history","push","KakaoButton","jsKey","buttonText","onSuccess","onFailure","getProfile","KakaoLogin","withRouter","LoginContainer","Consumer","withLogin","WrappedComponent","BoardForm","handleSubmit","e","preventDefault","selectedBoard","data","brdwriter","value","brddetail","brdtitle","brdno","brddate","onSaveData","nextProps","nextState","onSubmit","placeholder","ref","node","cols","rows","type","BoardRow","handleRemove","row","onRemove","handleSelectRow","onSelectRow","toLocaleDateString","maxNo","boards","Date","handleSaveData","map","concat","filter","border","align","BoardItem","key","BoardDbForm","Router","exact","path","component","About","Board","BoardDb","MyBoard","MyPage","App","getItem","Kakao","Auth","logout","clear","Provider","Layout","Content","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd55662a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport styled, { css } from 'styled-components'\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n    render(){\r\n        const {logged, onLogout} = this.props;\r\n        return(\r\n            <Container>\r\n                <Element>\r\n                    {logged ?\r\n                        <ShortCut><Link to =\"/\" onClick={onLogout}>로그아웃</Link></ShortCut> :\r\n                        <ShortCut><Link to=\"/Login\">로그인/회원가입</Link></ShortCut>}\r\n                    <Logo>\r\n                        <img \r\n                            width=\"100%\" \r\n                            height=\"100%\" \r\n                            src=\"https://t1.daumcdn.net/cfile/tistory/99CD014B5BD01FA412\" \r\n                            alt=\"logo\" />\r\n                    </Logo>\r\n                    <Search>\r\n                        <Link to=\"/\" style={{textDecoration: 'none', color:'#274046'}}>\r\n                            <h1>쭌의 블로그</h1>\r\n                        </Link>\r\n                    </Search>\r\n                </Element>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    border-bottom: 1px solid #d1d8e4;\r\n`\r\nconst Element = styled.div`\r\n    margin: 0 auto;\r\n    width: 1080px;\r\n    height: 100px;\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n`\r\nconst ShortCut = styled.div`\r\n    order: 1;\r\n    width: 100%;\r\n    height: 20px;\r\n    text-align: right;\r\n    background-color: #a8ff78;\r\n`\r\n\r\nconst Logo = styled.div`\r\n    order: 2;\r\n    width: 200px;\r\n    height: 80px;\r\n`\r\n\r\nconst Search = styled.div`\r\n    order: 3;\r\n    width:880px;\r\n    background-color: #78ffd6;\r\n    text-align:center;\r\n`","import React, {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Navigation extends Component {\r\n    render(){\r\n        return(\r\n            <Nav>\r\n                <NavList>\r\n                    <NavItem><Link to='/about'>소개</Link></NavItem>\r\n                    <NavItem><Link to='/board'>게시판(M)</Link></NavItem>\r\n                    <NavItem><Link to='/boardDb'>게시판(D)</Link></NavItem>\r\n                    <NavItem><Link to='/myboard'>내 글보기</Link></NavItem>\r\n                    <NavItem><Link to='/mypage'>마이페이지</Link></NavItem>\r\n                </NavList>\r\n            </Nav>\r\n        );\r\n    }\r\n}\r\n\r\nconst Nav = styled.div`\r\n    width: 100%;\r\n    height: 30px;\r\n    border-bottom: 1px solid #d1d8e4;\r\n`\r\n\r\nconst NavList = styled.ul`\r\n    width: 1080px;\r\n    display: flex;\r\n    margin: 0 auto;\r\n`\r\n\r\nconst NavItem = styled.li`\r\n    margin-left: 18px;\r\n    margin-top: 5px;\r\n    display: flex;\r\n`\r\n\r\nexport default Navigation;","import React, {Component} from 'react';\r\n\r\nconst API_KEY = '9a61a8dd1210a88a663e3086da08601a';\r\n\r\nclass Home extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            // lat: 0,\r\n            // long: 0,\r\n            temperature: 0,\r\n            name: '',\r\n            icon: ''\r\n        }\r\n    }\r\n    // getPosition = () => {\r\n    //     const options = {\r\n    //         timeout: 10000,\r\n    //         enableHighAccuracy: true,\r\n    //         maximumAge: 0\r\n    //     };\r\n    //     if(navigator.geolocation){\r\n    //         navigator.geolocation.getCurrentPosition((position) => {\r\n    //             this.setState({\r\n    //                 lat: position.coords.latitude,\r\n    //                 long: position.coords.longitude\r\n    //             });\r\n    //         },(error) => {\r\n    //             console.log(error);\r\n    //         },options);\r\n    //     }\r\n    //     this.getWeather();\r\n    // }\r\n    getWeather = () => {\r\n        const {lat,long} = this.state;\r\n        // fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&APPID=${API_KEY}`)\r\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=Seoul&appid=${API_KEY}`)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    temperature: Math.floor(json.main.temp - 273.15),\r\n                    name: json.weather[0].main,\r\n                    icon: json.weather[0].icon,\r\n                })\r\n            });\r\n    }\r\n    componentDidMount(){\r\n        // this.getPosition();\r\n        this.getWeather();\r\n    }\r\n    \r\n    render(){\r\n        const {temperature, name, icon} = this.state;\r\n        const img_url = `http://openweathermap.org/img/w/${icon}.png`;\r\n        return(\r\n            <>\r\n                <h1>오늘의 날씨</h1>\r\n                <img alt=\"weather_icon\" src={img_url}></img>\r\n                <h3>온도 : {temperature}℃</h3>\r\n                <h3>날씨 : {name}</h3>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst Store = React.createContext();\r\n\r\nexport default Store;","import React, {Component} from 'react';\r\nimport {GoogleLogin} from 'react-google-login';\r\nimport KakaoLogin from 'react-kakao-login';\r\nimport styled from 'styled-components';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nclass Login extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            id: '',\r\n            name: '',\r\n            provider: '',\r\n        }\r\n    }\r\n    // Google Login\r\n    responseGoogle = (res) => {\r\n        console.log(res);\r\n        // this.setState({\r\n        //     id: res.googleId,\r\n        //     name: res.profileObj.name,\r\n        //     provider: 'google'\r\n        // });\r\n    }\r\n    // Kakao Login\r\n    responseKakao = (res) => {\r\n        this.setState({\r\n            id: res.profile.id,\r\n            name: res.profile.properties.nickname,\r\n            provider: 'kakao'\r\n        });\r\n        console.log(\"id : \" + res.profile.id);\r\n        console.log(\"name : \" + res.profile.properties.nickname);\r\n        this.doSignUp();\r\n    }\r\n    // Login Fail\r\n    responseFail = (err) => {\r\n        console.log(err);\r\n    }\r\n    // doSignUp\r\n    doSignUp = () => {\r\n        const {id, name, provider} = this.state;\r\n        window.sessionStorage.setItem('id', id);\r\n        window.sessionStorage.setItem('name', name);\r\n        window.sessionStorage.setItem('provider', provider);\r\n        this.props.onLogin();\r\n        this.props.history.push('/');\r\n    }\r\n    render(){\r\n        return (\r\n            <Container>\r\n                {/* <GoogleLogin\r\n                    clientId={process.env.REACT_APP_Google}\r\n                    //clientId=\"AIzaSyAXewp73d2xumH6lLeDTJMFNCvPpVECfC8\"\r\n                    buttonText=\"Google\"\r\n                    onSuccess={this.responseGoogle}\r\n                    onFailure={this.responseFail}\r\n                /> */}\r\n                <KakaoButton \r\n                    //jsKey={process.env.REACT_APP_Kakao}\r\n                    jsKey=\"f712c51a7c97cbf08bd3294fa2f4463c\"\r\n                    buttonText=\"Kakao\"\r\n                    onSuccess={this.responseKakao}\r\n                    onFailure={this.responseFail}\r\n                    getProfile=\"true\"\r\n                />\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-flow: column wrap;\r\n`\r\nconst KakaoButton = styled(KakaoLogin)`\r\n    padding: 0;\r\n    width: 190px;\r\n    height: 44px;\r\n    line-height: 44px;\r\n    color: #783c00;\r\n    background-color:#FFEB00;\r\n    border: 1px solid transparent;\r\n    border-radius: 3px;\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n    text-align: center;\r\n`\r\n\r\nexport default withRouter(Login);","import React, {Component} from 'react';\r\nimport Store from '../Store/Store';\r\nimport Login from './Login';\r\n\r\nconst LoginContainer = () => (\r\n    <Store.Consumer>\r\n        {Store => (\r\n            <Login onLogin={Store.onLogin}/>)}\r\n    </Store.Consumer>\r\n)\r\n\r\nexport default LoginContainer;","import React, {Component} from 'react';\r\nimport Store from '../Store/Store';\r\nimport LoginContainer from './LoginContainer';\r\n\r\nconst withLogin = (WrappedComponent) =>\r\n\r\nclass IsLogin extends Component {\r\n    render() {\r\n        return (\r\n            <Store.Consumer>\r\n                {Store => {\r\n                    if(Store.logged === false)\r\n                        return <LoginContainer />;\r\n                    else\r\n                        return <WrappedComponent />;\r\n                }}\r\n            </Store.Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withLogin;","import React, {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport withLogin from './LoginHOC';\r\n\r\nclass About extends Component {\r\n    render(){\r\n        return (\r\n            <div>\r\n                <p>\r\n                    <img src=\"/Images/limbj1.jpg\"></img>\r\n                    <img src=\"/Images/limbj2.jpg\"></img>\r\n                </p>\r\n                <p>저는 임병준 입니다.</p>\r\n                <p>태어난 일은 1975년 12월 8일(양력) 입니다.<br />\r\n                태어난 일은 1975년 11월 6일(음력) 입니다.</p>\r\n                <p>혈액형은 AB형이고, 성격은 긍정적 입니다.</p>\r\n                <p>대동상업고등학교(현 대동세무고등학교) 상업과 졸업<br /> \r\n                안양과학대학교(현 연성대학교) 공업경영학과 졸업<br />\r\n                한성대학교 산업공학과 편입 및 졸업</p>\r\n                <p>\r\n                    <b>경력사항</b><br />\r\n                    - ERP 프로그램 개발(10년차)<br />\r\n                    <b>개발언어 및 툴</b><br /> \r\n                    - Visual Basic.net<br />\r\n                    - MS-SQL, ORACLE<br />\r\n                    - Crystal Report<br />\r\n                </p>\r\n                <p>\r\n                    <b>교육사항</b><br />\r\n                    - 2019년 06월 08일 ~ 2018년 07월 07일 <br />\r\n                    &nbsp;&nbsp;<b>자바(JAVA) 프로그래밍(고급)</b><br />\r\n                    &nbsp;&nbsp;더조은IT아카데미<br />\r\n                    - 2018년 12월 09일 ~ 2019년 01월 12일<br />\r\n                    &nbsp;&nbsp;<b>자바(JAVA) 프로그래밍(중급)</b><br />\r\n                    &nbsp;&nbsp;더조은IT아카데미<br />\r\n                    - 2018년 11월 03일 ~ 2018년 12월 08일 <br />\r\n                    &nbsp;&nbsp;<b>자바(JAVA) 프로그래밍(초급)</b><br />\r\n                    &nbsp;&nbsp;더조은IT아카데미 <br />\r\n                </p>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withLogin(About);","import React, { Component } from 'react';\r\n\r\nclass BoardForm extends Component {\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        let selectedBoard = nextProps.selectedBoard;\r\n        if (!selectedBoard.brdno) {\r\n            this.brdtitle.value = \"\";\r\n            this.brdwriter.value = \"\";        \r\n            return true;\r\n        }\r\n        this.brdtitle.value = selectedBoard.brdtitle;\r\n        this.brddetail.value = selectedBoard.brddetail;\r\n        this.brdwriter.value = selectedBoard.brdwriter;        \r\n        return true;\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let selectedBoard = this.props.selectedBoard;\r\n        let data = {\r\n            brdwriter: this.brdwriter.value,\r\n            brddetail: this.brddetail.value,\r\n            brdtitle: this.brdtitle.value\r\n        }\r\n        if (selectedBoard.brdno) {\r\n            data.brdno = selectedBoard.brdno\r\n            data.brddate = selectedBoard.brddate\r\n        }        \r\n        this.props.onSaveData(data);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                제&nbsp;&nbsp;&nbsp;목 : <input placeholder=\"title\" ref={node => this.brdtitle = node}/>\r\n                <br />\r\n                글쓴이 : <input placeholder=\"name\" ref={node => this.brdwriter = node}/>\r\n                <br />\r\n                내&nbsp;&nbsp;&nbsp;용 : \r\n                <br />\r\n                <textarea placeholder=\"detail\" ref={node => this.brddetail = node} cols=\"70\" rows=\"10\"></textarea>\r\n                <br />\r\n                <button type=\"submit\">Save</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BoardForm;","import React, { Component } from 'react';\r\n\r\nclass BoardRow extends Component {\r\n    handleRemove = () => {\r\n        const { row, onRemove } = this.props;\r\n        onRemove(row.brdno);\r\n    }    \r\n    \r\n    handleSelectRow = () => {\r\n        const { row, onSelectRow } = this.props;\r\n        onSelectRow(row);\r\n    }    \r\n    \r\n    render() {\r\n        return(\r\n            <tr>\r\n                <td>{this.props.row.brdno}</td>\r\n                <td><a onClick={this.handleSelectRow}>{this.props.row.brdtitle}</a></td>\r\n                <td>{this.props.row.brddetail}</td>\r\n                <td>{this.props.row.brdwriter}</td>\r\n                <td>{this.props.row.brddate.toLocaleDateString('ko-KR')}</td>\r\n                <td><button onClick={this.handleRemove}>X</button></td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BoardRow;\r\n","import React, { Component } from 'react';\r\nimport withLogin from './LoginHOC';\r\nimport BoardForm from '../Components/BoardForm';\r\nimport BoardItem from '../Components/BoardItem';\r\n\r\n/*\r\n    component files.\r\n*/\r\nclass Board extends Component {\r\n\r\n    state = {\r\n        maxNo: 2,\r\n        boards: [\r\n            {\r\n                brdno: 1,\r\n                brdwriter: '임병준',\r\n                brdtitle: '테스트 게시판 제목 입니다.',\r\n                brddetail: '테스트 게시판 내용 입니다.',\r\n                brddate: new Date()\r\n            },\r\n        ],\r\n         selectedBoard:{}\r\n    }\r\n    \r\n    handleSaveData = (data) => {\r\n        if (!data.brdno) {            // new : Insert\r\n            this.setState({\r\n                maxNo: this.state.maxNo+1,\r\n                boards: this.state.boards.concat({brdno: this.state.maxNo, brddate: new Date(), ...data }),\r\n                selectedBoard: {}\r\n            });\r\n        } else {                                                        // Update\r\n            this.setState({\r\n                boards: this.state.boards.map(row => data.brdno === row.brdno ? {...data }: row),\r\n                selectedBoard: {}\r\n            })            \r\n        }\r\n    }\r\n    \r\n    handleRemove = (brdno) => {\r\n        this.setState({\r\n            boards: this.state.boards.filter(row => row.brdno !== brdno)\r\n        })\r\n    }\r\n    \r\n    handleSelectRow = (row) => {\r\n        this.setState({selectedBoard:row});\r\n    }\r\n    \r\n    render() {\r\n        const { boards, selectedBoard } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <BoardForm selectedBoard={selectedBoard} onSaveData={this.handleSaveData}/>\r\n                <table border=\"1\">\r\n                    <tbody>\r\n                    <tr align=\"center\">\r\n                        <td width=\"50\">순번</td>\r\n                        <td width=\"300\">제목</td>\r\n                        <td width=\"200\">내용</td>\r\n                        <td width=\"50\">글쓴이</td>\r\n                        <td width=\"100\">작성일</td>\r\n                        <td>삭제</td>\r\n                    </tr>\r\n                    {\r\n                        boards.map(row =>\r\n                            (<BoardItem key={row.brdno} row={row} onRemove={this.handleRemove} onSelectRow={this.handleSelectRow} />)\r\n                        )\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withLogin(Board);","import React, { Component } from 'react';\r\n\r\nclass BoardDbForm extends Component {\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        let selectedBoard = nextProps.selectedBoard;\r\n        if (!selectedBoard.brdno) {\r\n            this.brdtitle.value = \"\";\r\n            this.brdwriter.value = \"\";        \r\n            return true;\r\n        }\r\n        this.brdtitle.value = selectedBoard.brdtitle;\r\n        this.brddetail.value = selectedBoard.brddetail;\r\n        this.brdwriter.value = selectedBoard.brdwriter;        \r\n        return true;\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let selectedBoard = this.props.selectedBoard;\r\n        let data = {\r\n            brdwriter: this.brdwriter.value,\r\n            brddetail: this.brddetail.value,\r\n            brdtitle: this.brdtitle.value\r\n        }\r\n        if (selectedBoard.brdno) {\r\n            data.brdno = selectedBoard.brdno\r\n            data.brddate = selectedBoard.brddate\r\n        }        \r\n        this.props.onSaveData(data);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                제&nbsp;&nbsp;&nbsp;목 : <input placeholder=\"title\" ref={node => this.brdtitle = node}/>\r\n                <br />\r\n                글쓴이 : <input placeholder=\"name\" ref={node => this.brdwriter = node}/>\r\n                <br />\r\n                내&nbsp;&nbsp;&nbsp;용 : \r\n                <br />\r\n                <textarea placeholder=\"detail\" ref={node => this.brddetail = node} cols=\"70\" rows=\"10\"></textarea>\r\n                <br />\r\n                <button type=\"submit\">Save</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BoardDbForm;","import React, { Component } from 'react';\r\n\r\nclass BoardRow extends Component {\r\n    handleRemove = () => {\r\n        const { row, onRemove } = this.props;\r\n        onRemove(row.brdno);\r\n    }    \r\n    \r\n    handleSelectRow = () => {\r\n        const { row, onSelectRow } = this.props;\r\n        onSelectRow(row);\r\n    }    \r\n    \r\n    render() {\r\n        return(\r\n            <tr>\r\n                <td>{this.props.row.brdno}</td>\r\n                <td><a onClick={this.handleSelectRow}>{this.props.row.brdtitle}</a></td>\r\n                <td>{this.props.row.brddetail}</td>\r\n                <td>{this.props.row.brdwriter}</td>\r\n                <td>{this.props.row.brddate.toLocaleDateString('ko-KR')}</td>\r\n                <td><button onClick={this.handleRemove}>X</button></td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BoardRow;\r\n","import React, { Component } from 'react';\r\nimport withLogin from './LoginHOC';\r\nimport BoardForm from '../Components/BoardDbForm';\r\nimport BoardItem from '../Components/BoardDbItem';\r\n\r\n/*\r\n    component files.\r\n*/\r\nclass BoardDb extends Component {\r\n\r\n    state = {\r\n        maxNo: 2,\r\n        boards: [\r\n            {\r\n                brdno: 1,\r\n                brdwriter: '임병준',\r\n                brdtitle: '테스트 게시판 제목 입니다.',\r\n                brddetail: '테스트 게시판 내용 입니다.',\r\n                brddate: new Date()\r\n            },\r\n        ],\r\n         selectedBoard:{}\r\n    }\r\n    \r\n    handleSaveData = (data) => {\r\n        if (!data.brdno) {            // new : Insert\r\n            this.setState({\r\n                maxNo: this.state.maxNo+1,\r\n                boards: this.state.boards.concat({brdno: this.state.maxNo, brddate: new Date(), ...data }),\r\n                selectedBoard: {}\r\n            });\r\n        } else {                                                        // Update\r\n            this.setState({\r\n                boards: this.state.boards.map(row => data.brdno === row.brdno ? {...data }: row),\r\n                selectedBoard: {}\r\n            })            \r\n        }\r\n    }\r\n    \r\n    handleRemove = (brdno) => {\r\n        this.setState({\r\n            boards: this.state.boards.filter(row => row.brdno !== brdno)\r\n        })\r\n    }\r\n    \r\n    handleSelectRow = (row) => {\r\n        this.setState({selectedBoard:row});\r\n    }\r\n    \r\n    render() {\r\n        const { boards, selectedBoard } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <BoardForm selectedBoard={selectedBoard} onSaveData={this.handleSaveData}/>\r\n                <table border=\"1\">\r\n                    <tbody>\r\n                    <tr align=\"center\">\r\n                        <td width=\"50\">순번</td>\r\n                        <td width=\"300\">제목</td>\r\n                        <td width=\"200\">내용</td>\r\n                        <td width=\"50\">글쓴이</td>\r\n                        <td width=\"100\">작성일</td>\r\n                        <td>삭제</td>\r\n                    </tr>\r\n                    {\r\n                        boards.map(row =>\r\n                            (<BoardItem key={row.brdno} row={row} onRemove={this.handleRemove} onSelectRow={this.handleSelectRow} />)\r\n                        )\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withLogin(BoardDb);","import React, {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport withLogin from './LoginHOC';\r\n\r\nclass MyBoard extends Component {\r\n    render(){\r\n        return (\r\n            <div>\r\n                내 글보기\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withLogin(MyBoard);","import React, {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport withLogin from './LoginHOC';\r\n\r\nclass MyPage extends Component {\r\n    render(){\r\n        return (\r\n            <div>\r\n                마이페이지\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default withLogin(MyPage);\r\n","import React from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport {Home, About, Login, Board, BoardDb, MyBoard, MyPage} from './Index';\r\n\r\nconst Router = () => (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route path=\"/about\" component={About} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route path=\"/board\" component={Board} />\r\n        <Route path=\"/boardDb\" component={BoardDb} />\r\n        <Route path=\"/myboard\" component={MyBoard} />\r\n        <Route path=\"/mypage\" component={MyPage} />\r\n    </Switch>\r\n);\r\n\r\nexport default Router;","import React , {Component} from 'react';\nimport styled, {css} from 'styled-components'\nimport Header from './Layout/Header';\nimport Navigation from './Layout/Navigation';\nimport Router from './Routes/Router';\nimport Store from './Store/Store';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      logged: false,\n      onLogin: this.onLogin,\n      onLogout: this.onLogout\n    }\n  }\n  \n  // Login Func\n  onLogin = () => {\n    this.setState({\n      logged: true\n    });\n  }\n\n  // Logout Func\n  onLogout = () => {\n    this.setState({\n      logged: false\n    });\n\n    const provider = window.sessionStorage.getItem('provider');\n    // Google AccessToken Remove\n    if(provider === 'google'){\n      \n    // Kakao AccessToken Remove \n    } else if(provider === 'kakao') {\n      window.Kakao.Auth.logout(function(){\n        console.log(\"Kakao logout\");\n      });\n    }\n    // SessionStorage clear\n    window.sessionStorage.clear();\n  }\n\n  componentDidMount() {\n    const id = window.sessionStorage.getItem('id');\n    if(id){\n      this.onLogin();\n    } else {\n      this.onLogout();\n    }\n  }\n\n  render(){\n    const {logged, onLogout} = this.state;\n    return(\n      <Store.Provider value={this.state}>\n        <Layout>\n          <Header logged={logged} onLogout={onLogout} />\n          <Navigation />\n            <Content>\n              <Router />\n            </Content>\n        </Layout>\n      </Store.Provider>\n    );\n  }\n}\n\nconst Layout = styled.div`\n  margin: 0 auto;\n  display: flex;\n  width: 100%;\n  flex-flow: row wrap;\n`\nconst Content = styled.div`\n  margin: 0 auto;\n`\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\n//import {GraphQlServer} from 'graphql-yoga';\n// import resolvers from './resolvers';\n// import typeDefs from './typeDefs';\n//import {connect} from 'http2';\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>  \n, document.getElementById('root'));\n\n// GraphqL server connect\n// const server = new GraphQlServer({typeDefs, resolvers});\n// server.start(() => console.log('Server is running at http://localhost:4000'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}